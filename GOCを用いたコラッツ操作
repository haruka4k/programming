def find_first_6n4_fixed(n):
    steps = []
    while n % 6 != 4:
        steps.append(n)
        if n % 2 == 0:
            n //= 2
        else:
            n = 3 * n + 1
    steps.append(n)
    return n, steps

def gco_step_modified_r3_new(a):
    if a % 2 == 1:
        return (3 * a + 1) // 2, "R1"
    elif a % 4 == 0:
        return (3 * a) // 4, "R2"
    elif a % 4 == 2:
        return (a - 2) // 4, "R3"
    else:
        return a, "Invalid"

def generate_gco_sequence_modified_r3_new(n_start, max_steps=1000):
    first_n, pre_steps = find_first_6n4_fixed(n_start)
    a = (first_n - 4) // 6
    gco_seq = [6 * a + 4]
    gco_rules = []

    seen = set()
    steps = 0

    while a != 0 and a not in seen and steps < max_steps:
        seen.add(a)
        a_next, rule = gco_step_modified_r3_new(a)
        if rule == "Invalid":
            break
        a = a_next
        gco_seq.append(6 * a + 4)
        gco_rules.append(rule)
        steps += 1

    if a == 0:
        gco_seq.extend([2, 1])
        gco_rules.extend(["→2", "→1"])
    elif a in seen:
        gco_seq.append(6 * a + 4)
        gco_rules.append("⟳")

    return pre_steps, gco_seq, gco_rules

def print_gco_sequence_summary_clean_root(n_start, pre_steps, gco_seq, gco_rules):
    summary = f"初期値: {n_start}, 総ステップ数: {len(pre_steps) - 1 + len(gco_rules) + (2 if gco_seq[-3:] == [4, 2, 1] else 0)}"
    normal_part = " → ".join(str(n) for n in pre_steps)

    compressed_parts = []
    for i in range(len(gco_rules)):
        val = gco_seq[i]
        rule = gco_rules[i]
        if rule in ["→2", "→1"]:
            continue  # 根の処理は最後にまとめて記述
        arrow = "→₁" if rule == "R1" else "→₂" if rule == "R2" else "→₃" if rule == "R3" else rule
        compressed_parts.append(f"{val} {arrow}")
    
    if gco_seq[-3:] == [4, 2, 1]:
        compressed_parts.append("4 → 2 → 1")
    else:
        compressed_parts.append(str(gco_seq[-1]))

    compressed_output = " ".join(compressed_parts)
    return summary, normal_part, compressed_output

# 🔷 メイン処理（input対応）
if __name__ == "__main__":
    try:
        n_input = int(input("初期値を入力してください（自然数）: "))
        pre_steps, gco_seq, gco_rules = generate_gco_sequence_modified_r3_new(n_input)
        summary, normal_part, compressed_output = print_gco_sequence_summary_clean_root(
            n_input, pre_steps, gco_seq, gco_rules
        )

        print("\n🧾 概要:")
        print(summary)
        print("\n🔹 通常のコラッツ操作（6n+4 に至るまで）:")
        print(normal_part)
        print("\n🔸 GCO圧縮系列:")
        print(compressed_output)

    except ValueError:
        print("自然数を入力してください。")
