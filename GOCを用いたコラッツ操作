# GCOルール適用関数（修正版）
def gco_step_modified_fixed(a):
    if a % 2 == 1:
        return (3 * a + 1) // 2, "R1"
    elif a % 4 == 0:
        return (3 * a) // 4, "R2"
    elif a % 4 == 2:
        return int(a / 4 - 0.5), "R3"
    else:
        return a, "Invalid"

# 初期値から最初の6n+4型になるまで通常のCollatz操作を進める
def find_first_6n4_fixed(n):
    steps = []
    while n % 6 != 4:
        steps.append(n)
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
    steps.append(n)
    return n, steps

# GCO圧縮系列の生成
def generate_gco_sequence_modified_fixed(n_start, max_steps=1000):
    first_n, pre_steps = find_first_6n4_fixed(n_start)
    a = (first_n - 4) // 6
    gco_seq = [6 * a + 4]
    gco_rules = []

    seen = set()
    steps = 0

    while a != 0 and a not in seen and steps < max_steps:
        seen.add(a)
        a_next, rule = gco_step_modified_fixed(a)
        if rule == "Invalid":
            break
        a = a_next
        gco_seq.append(6 * a + 4)
        gco_rules.append(rule)
        steps += 1

    if a == 0:
        # ✓4 を除外し、→2 →1 だけ追加
        gco_seq.extend([2, 1])
        gco_rules.extend(["→2", "→1"])
    elif a in seen:
        gco_seq.append(6 * a + 4)
        gco_rules.append("⟳")

    return pre_steps, gco_seq, gco_rules

# 出力フォーマット（✓4 を除外し、矢印種別表示・ステップ数含む）
def print_gco_sequence_summary(n_start, pre_steps, gco_seq, gco_rules):
    total_steps = len(pre_steps) + len(gco_rules)
    steps_str = " → ".join(map(str, pre_steps)) if pre_steps else ""
    arrow_map = {
        "R1": "→₁",
        "R2": "→₂",
        "R3": "→₃",
        "⟳": "⟳",
        "→2": "⇒₂",
        "→1": "⇒₁"
    }

    if "✓" in gco_rules:
        index = gco_rules.index("✓")
        gco_seq = gco_seq[:index] + gco_seq[index+1:]
        gco_rules = gco_rules[:index] + gco_rules[index+1:]

    compressed_str = str(gco_seq[0])
    for val, rule in zip(gco_seq[1:], gco_rules):
        compressed_str += f" {arrow_map.get(rule, '→')} {val}"

    summary = f"初期値: {n_start}, 総ステップ数: {total_steps}"
    return summary, steps_str, compressed_str
